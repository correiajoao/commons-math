/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 17:23:38 GMT 2020
 */

package org.apache.commons.math4.stat.descriptive.summary;

import org.apache.commons.math4.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SumOfSquares_ESTest extends SumOfSquares_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     increment() e a getResult() resultam em valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        sumOfSquares0.increment((-787.2));
        double double0 = sumOfSquares0.getResult();
        assertEquals(619683.8400000001, double0, 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     increment() e a getN() resultam em valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        sumOfSquares0.increment((-1.0));
        long long0 = sumOfSquares0.getN();
        assertEquals(1L, long0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     increment() e a getN() resultam em valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 1523.270382318;
        double double0 = sumOfSquares0.evaluate(doubleArray0, 1, 1);
        assertEquals(2320352.657647226, double0, 0.01);
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
        assertEquals(0L, sumOfSquares0.getN());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     lança uma NullPointerException. A documentação especifica que para erros nos valores passados uma
    *     MathIllegalArgumentException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        // Undeclared exception!
        try {
            sumOfSquares0.evaluate((double[]) null, (-2439), (-2439));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // input array
            //
            verifyException("org.apache.commons.math4.util.MathArrays", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     lança uma RuntimeException. A documentação especifica que para erros nos valores passados uma
    *     MathIllegalArgumentException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double[] doubleArray0 = new double[4];
        try {
            sumOfSquares0.evaluate(doubleArray0, 0, (-1472));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // length (-1,472)
            //
            verifyException("org.apache.commons.math4.util.MathArrays", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     lança uma RuntimeException. A documentação especifica que para erros nos valores passados uma
    *     MathIllegalArgumentException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double[] doubleArray0 = new double[9];
        try {
            sumOfSquares0.evaluate(doubleArray0, 216, 0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // subarray ends after array end
            //
            verifyException("org.apache.commons.math4.util.MathArrays", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se os valores
    *     do Objeto são os esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double[] doubleArray0 = new double[2];
        double double0 = sumOfSquares0.evaluate(doubleArray0, 1, 1);
        assertEquals(0L, sumOfSquares0.getN());
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
        assertEquals(0.0, double0, 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se mesmo com
    *     a chamada da função copy() os valores do Objeto são os esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        SumOfSquares.copy(sumOfSquares0, sumOfSquares0);
        assertEquals(0L, sumOfSquares0.getN());
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se a função
    *     evaluate() produz os resultados esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double[] doubleArray0 = new double[6];
        double double0 = sumOfSquares0.evaluate(doubleArray0);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
        assertEquals(0L, sumOfSquares0.getN());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste analisa comportamentos já verificados em outros testes.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        long long0 = sumOfSquares0.getN();
        assertEquals(0L, long0);
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste analisa comportamentos já verificados em outros testes.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        SumOfSquares sumOfSquares1 = new SumOfSquares(sumOfSquares0);
        assertEquals(0L, sumOfSquares1.getN());
        assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste analisa comportamentos já verificados em outros testes.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        sumOfSquares0.clear();
        assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
        assertEquals(0L, sumOfSquares0.getN());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste produz análises repetitivas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        SumOfSquares sumOfSquares1 = sumOfSquares0.copy();
        assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
        assertEquals(0L, sumOfSquares1.getN());
        assertNotSame(sumOfSquares1, sumOfSquares0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste analisa comportamentos já verificados em outros testes.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        SumOfSquares sumOfSquares0 = new SumOfSquares();
        double double0 = sumOfSquares0.getResult();
        assertEquals(0L, sumOfSquares0.getN());
        assertEquals(0.0, double0, 0.01);
    }
}
