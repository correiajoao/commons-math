/*
* This file was automatically generated by EvoSuite
* Mon Feb 24 21:52:34 GMT 2020
*/

package org.apache.commons.math4.util;

import org.apache.commons.math4.util.MathArrays;
import org.apache.commons.math4.util.ResizableDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ResizableDoubleArray_ESTest extends ResizableDoubleArray_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     comparação de dois Arrays é desigual e os valores do Array são os esperados.
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(665, 665);
        ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(665);
        boolean boolean0 = resizableDoubleArray0.equals(resizableDoubleArray1);
        assertFalse(boolean0);
        assertEquals(0, resizableDoubleArray1.getNumElements());
        assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
        assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
        assertEquals(665, resizableDoubleArray1.getCapacity());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se os
    *     valores de um Array após a sua expansão são os esperados.
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        double[] doubleArray0 = new double[4];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
        resizableDoubleArray0.expand();
        double double0 = resizableDoubleArray0.addElementRolling((-2428.972097953515));
        assertEquals(10, resizableDoubleArray0.getCapacity());
        assertEquals(0.0, double0, 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se os
    *     valores de um Array são os esperados.
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(5);
        resizableDoubleArray0.setNumElements(5);
        assertEquals(5, resizableDoubleArray0.getNumElements());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      getElement() lança uma ArrayIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    MathIllegalArgumentException
    @Test(timeout = 4000)

    public void test06() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();

        try {
            resizableDoubleArray0.getElement(0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      checkContractExpand() lança uma ArrayIndexOutOfBoundsException. A documentação aponta que para valores <= 1 será lançada
    *      uma NumberIsTooSmallException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(5, 1784.562);
        try {
            resizableDoubleArray0.checkContractExpand(1.0, (-342.49));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // 1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O comportamento testado não diz respeito ao funcionamento da estrutura.
    *
    * Compreensivel: sim
    *     - O comportamento do teste não é compreensível, entretanto suas instruções sim.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(5, 5);
        resizableDoubleArray0.addElement(5);
        resizableDoubleArray0.addElementRolling(5);
        int int0 = resizableDoubleArray0.getStartIndex();
        assertEquals(1, resizableDoubleArray0.getNumElements());
        assertEquals(1, int0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     -  O teste não possui nenhuma estratégia de teste condizente com o comportamento do código testado.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
        MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
        doReturn((-1087.957389058)).when(mathArrays_Function0).evaluate(any(double[].class), anyInt(), anyInt());
        resizableDoubleArray0.compute(mathArrays_Function0);
        assertEquals(0, resizableDoubleArray0.getNumElements());
        assertEquals(16, resizableDoubleArray0.getCapacity());
        assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
        assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     os valores do Array são os esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test17() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
        resizableDoubleArray0.addElement(517.4139411621902);
        double double0 = resizableDoubleArray0.addElementRolling(517.4139411621902);
        assertEquals(2, resizableDoubleArray0.getCapacity());
        assertEquals(517.4139411621902, double0, 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método compute() com parametros ilegais lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test19() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();

        try {
            resizableDoubleArray0.compute((MathArrays.Function) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método addElementRolling() com parametros ilegais lança uma ArrayIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
        double[] doubleArray0 = new double[5];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(5, 5, 20.0, resizableDoubleArray_ExpansionMode0, doubleArray0);
        resizableDoubleArray0.addElementRolling(29.94444465637207);
        resizableDoubleArray0.discardFrontElements(5);

        try {
            resizableDoubleArray0.addElementRolling((-2081.963));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 6
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método ResizableDoubleArray() com parametros ilegais lança uma RuntimeException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test24() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = null;
        try {
            resizableDoubleArray0 = new ResizableDoubleArray(1600, 1.0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // 1.5 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (1)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método ResizableDoubleArray() com parametros ilegais lança uma RuntimeException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test25() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = null;
        try {
            resizableDoubleArray0 = new ResizableDoubleArray(2870, (-36.6818382), 849.6620975);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // 849.662 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (-36.682)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O comportamento testado não diz respeito ao funcionamento da estrutura.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test38() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(5, 1784.562);
        resizableDoubleArray0.setElement(520, 0.5);
        resizableDoubleArray0.setElement(5, 0.0);
        assertEquals(521, resizableDoubleArray0.getNumElements());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método setElement() com parametros ilegais lança uma ArrayIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test39() throws Throwable {
        double[] doubleArray0 = new double[7];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);

        try {
            resizableDoubleArray0.setElement((-593), 2188.989203896);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método getElement() com parametros ilegais lança uma ArrayIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test41() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();

        try {
            resizableDoubleArray0.getElement(1781);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     os valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test42() throws Throwable {
        double[] doubleArray0 = new double[4];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
        resizableDoubleArray0.getElement(0);
        assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
        assertEquals(5, resizableDoubleArray0.getCapacity());
        assertEquals(4, resizableDoubleArray0.getNumElements());
        assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     os valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test43() throws Throwable {
        double[] doubleArray0 = new double[24];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
        resizableDoubleArray0.discardMostRecentElements(0);
        assertEquals(25, resizableDoubleArray0.getCapacity());
        assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
        assertEquals(24, resizableDoubleArray0.getNumElements());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
        try {
            resizableDoubleArray0.checkContractExpand((-1.0), (-1203.8761677345742));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // -1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (-1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      ResizableDoubleArray() lança uma RuntimeException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test45() throws Throwable {
        ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
        double[] doubleArray0 = new double[3];
        ResizableDoubleArray resizableDoubleArray0 = null;
        try {
            resizableDoubleArray0 = new ResizableDoubleArray(3718, 2865.47035234756, 1956.3350952918101, resizableDoubleArray_ExpansionMode0, doubleArray0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // 1,956.335 is smaller than the minimum (1): contraction criteria (1,956.335) smaller than the expansion factor (2,865.47).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, os
    *     valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test46() throws Throwable {
        double[] doubleArray0 = new double[4];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
        double double0 = resizableDoubleArray0.substituteMostRecentElement(0.0);
        assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
        assertEquals(5, resizableDoubleArray0.getCapacity());
        assertEquals(0.0, double0, 0.01);
        assertEquals(4, resizableDoubleArray0.getNumElements());
        assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, os
    *     valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test49() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
        resizableDoubleArray0.discardFrontElements(0);
        resizableDoubleArray0.setElement(0, 0.0);
        resizableDoubleArray0.addElement(523.6534636731873);
        assertEquals(2, resizableDoubleArray0.getNumElements());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      setNumElements() lança uma RuntimeException. A documentação aponta que uma ArrayIndexOutOfBoundsException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test51() throws Throwable {
        double[] doubleArray0 = new double[0];
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
        try {
            resizableDoubleArray0.setNumElements((-1409));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // index (-1,409) is not positive
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      RuntimeException() lança uma RuntimeException. A documentação aponta que uma MathIllegalStateException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test52() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray((double[]) null);
        try {
            resizableDoubleArray0.substituteMostRecentElement(883.5096346092);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // cannot substitute an element from an empty array
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se o método
    *      discardFrontElements() lança uma RuntimeException. A documentação aponta que uma MathIllegalStateException será lançada.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test58() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1590);
        try {
            resizableDoubleArray0.discardFrontElements(5);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // cannot discard 5 elements from a 0 elements array
            //
            verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, os
    *     valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test59() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1590);
        double[] doubleArray0 = resizableDoubleArray0.getElements();
        assertEquals(1590, resizableDoubleArray0.getCapacity());
        assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
        assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
        assertEquals(0, doubleArray0.length);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica dois comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, os
    *     valores do Array são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test66() throws Throwable {
        ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
        double double0 = resizableDoubleArray0.getContractionCriterion();
        assertEquals(16, resizableDoubleArray0.getCapacity());
        assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
        assertEquals(2.5, double0, 0.01);
        assertEquals(0, resizableDoubleArray0.getNumElements());
    }

}
