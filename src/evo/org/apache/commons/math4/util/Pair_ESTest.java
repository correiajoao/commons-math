/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 04:00:13 GMT 2020
 */

package org.apache.commons.math4.util;

import org.apache.commons.math4.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Pair_ESTest extends Pair_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado no teste é se ele pode ser executado no tempo de 4s, o que não se demonstra
    *     plausível para um teste que cria instâncias de objetos e calcula hashCode destes.
    *
    * Compreensivel: sim
    *     - Apesar de não plausível, o comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Integer integer0 = new Integer(16);
        Integer integer1 = new Integer(16);
        Pair<Integer, Integer> pair0 = Pair.create(integer0, integer1);
        Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
        pair1.hashCode();
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se um
    *     valor null inserido em um Pair pode ser recuperado através da função getValue().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Pair<String, Object> pair0 = new Pair<String, Object>("", (Object) null);
        Object object0 = pair0.getValue();
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida se um
    *     valor null inserido em um Pair pode ser recuperado através da função getSecond().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Pair<String, Integer> pair0 = new Pair<String, Integer>(">Do-", (Integer) null);
        Object object0 = pair0.getSecond();
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se uma
    *     chave null inserida em um Pair pode ser recuperado através da função getKey().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Pair<Pair<Object, String>, String> pair0 = Pair.create((Pair<Object, String>) null, "");
        Pair<Object, String> pair1 = pair0.getKey();
        assertNull(pair1);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se uma
    *     chave null inserida em um Pair pode ser recuperada através da função getFirst().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Pair<Integer, String> pair0 = Pair.create((Integer) null, "nS70SPBEsZ^G(&HBSf");
        Integer integer0 = pair0.getFirst();
        assertNull(integer0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se um
    *     Pair inicializado com valor null lança uma exception.
    *
    * Compreensivel: sim
    *     - O comportamento do teste é compreensível, entretanto suas instruções demandam um pouco mais de esforço para o
    *     entendimento.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Pair<Integer, Object> pair0 = null;
        try {
            pair0 = new Pair<Integer, Object>((Pair<? extends Integer, ?>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math4.util.Pair", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s. Em seguida, se uma chave
    *     inserida em um Pair pode ser recuperada através da função getKey().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Pair<String, Object> pair0 = new Pair<String, Object>("nS70SPBEsZ^G(&HBSf", "nS70SPBEsZ^G(&HBSf");
        Object object0 = pair0.getKey();
        assertEquals("nS70SPBEsZ^G(&HBSf", object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se um
    *     valor inserido em um Pair pode ser recuperado através da função getValue().
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Integer integer0 = new Integer(1);
        Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
        Object object0 = pair0.getValue();
        assertEquals("", object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado no teste é se ele pode ser executado no tempo de 4s, o que não se demonstra
    *     plausível para um teste que cria instâncias de objetos e calcula hashCode destes.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Pair<String, Object> pair0 = new Pair<String, Object>((String) null, (Object) null);
        Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0);
        pair1.hashCode();
    }
     /*
     * Informações do teste
     *
     * Plausível: sim
     *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se Pairs
     *     compostos por outros Pairs quando duplicados, são iguais.
     *
     * Compreensivel: sim
     *     - Tanto o comportamento do teste e quanto as suas instruções demandam um pouco mais de esforço para a sua
     *     compreensão.
     */
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Integer integer0 = new Integer(12);
        Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
        Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
        Pair<Integer, Pair<Object, String>> pair2 = new Pair<Integer, Pair<Object, String>>(integer0, pair1);
        Pair<Integer, Object> pair3 = new Pair<Integer, Object>(pair2);
        boolean boolean0 = pair2.equals(pair3);
        assertTrue(boolean0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se Pairs
    *     distintos mas com o mesmo valor, são desiguais.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Integer integer0 = new Integer(768);
        Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, (String) null);
        Pair<Object, String> pair1 = new Pair<Object, String>(integer0, "</mo_(e\"zaRAM");
        boolean boolean0 = pair0.equals(pair1);
        assertFalse(boolean0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se um Pair
    *     composto por outro Pair como valor, são desiguais.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste e quanto as suas instruções demandam muito esforço para o entendimento.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Pair<String, Object> pair0 = new Pair<String, Object>((String) null, (Object) null);
        Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0);
        Integer integer0 = new Integer(1);
        Pair<Integer, Pair<Object, Object>> pair2 = new Pair<Integer, Pair<Object, Object>>(integer0, pair1);
        boolean boolean0 = pair2.equals(pair1);
        assertFalse(boolean0);
    }

   /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se dois
    *     dois Pairs compostos de valores null, são iguais. O teste utiliza estratégias muito elaborados para
    *     realizar a atividade.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste e quanto as suas instruções demandam um pouco de esforço para o entendimento.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Pair<String, String> pair0 = Pair.create((String) null, (String) null);
        Pair<String, Object> pair1 = new Pair<String, Object>(pair0);
        boolean boolean0 = pair1.equals(pair0);
        assertTrue(boolean0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se dois
    *     dois Pairs compostos por outros Pairs são desiguais. O teste utiliza estratégias muito elaborados para
    *     realizar a atividade.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste e quanto as suas instruções demandam um muito de esforço para o entendimento.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Pair<String, Integer> pair0 = new Pair<String, Integer>(">Do-", (Integer) null);
        Pair<Object, Object> pair1 = new Pair<Object, Object>((Object) null, pair0);
        Pair<Object, Integer> pair2 = new Pair<Object, Integer>(pair0);
        boolean boolean0 = pair1.equals(pair2);
        assertFalse(boolean0);
    }

   /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     chave e valor inseridos em um Pair são iguais ao conteúdo do seu toString.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Integer integer0 = new Integer(2749);
        Pair<String, Integer> pair0 = new Pair<String, Integer>(")W'O", integer0);
        String string0 = pair0.toString();
        assertEquals("[)W'O, 2749]", string0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     chave inserida em um Pair e a recuperada são iguais.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Integer integer0 = new Integer(1);
        Pair<Integer, Integer> pair0 = Pair.create(integer0, integer0);
        Integer integer1 = pair0.getFirst();
        assertEquals(1, (int) integer1);
    }
}
